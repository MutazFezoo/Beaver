apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0

android {

    def sdk = rootProject.ext.sdk

    compileSdkVersion sdk.compileSdkVersion

    defaultConfig {
        applicationId 'net.samystudio.beaver'
        minSdkVersion sdk.minSdkVersion
        targetSdkVersion sdk.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        buildConfigField('String', 'FULL_VERSION_NAME', "\"$versionName.$versionCode\"")
        resValue 'string', 'application_id', applicationId
    }

    signingConfigs {
        release {
            keyAlias 'beaver'
            keyPassword 'beaver'
            storeFile file('keystore.jks')
            storePassword 'beaver'
        }
    }

    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [crashlyticsEnabled: true]
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    kapt {
        generateStubs = false
    }

    androidExtensions {
        experimental = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def sep = '_'
            def version = variant.versionName
            def build = variant.versionCode
            outputFileName = "${rootProject.name}${sep}" +
                    "${variant.buildType.name}${sep}" +
                    "${version}${sep}" +
                    "build${sep}${build}.apk"
        }
    }

    configurations.all { config ->
        if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
            config.resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.squareup.leakcanary' &&
                        details.requested.name == 'leakcanary-android') {
                    details.useTarget(
                            group: details.requested.group,
                            name: 'leakcanary-android-no-op',
                            version: details.requested.version
                    )
                }
            }
        }
    }
}

dependencies {

    def kotlinDependencies = rootProject.ext.kotlinDependencies
    def supportDependencies = rootProject.ext.supportDependencies
    def archDependencies = rootProject.ext.archDependencies
    def firebaseDependencies = rootProject.ext.firebaseDependencies
    def daggerDependencies = rootProject.ext.daggerDependencies
    def conductorDependencies = rootProject.ext.conductorDependencies
    def reactiveDependencies = rootProject.ext.reactiveDependencies
    def networkDependencies = rootProject.ext.networkDependencies
    def debugDependencies = rootProject.ext.debugDependencies
    def miscDependencies = rootProject.ext.miscDependencies
    def testDependencies = rootProject.ext.testDependencies

    implementation kotlinDependencies.kotlin
    implementation kotlinDependencies.ktx

    implementation supportDependencies.supportv4
    implementation supportDependencies.appcompatv7
    implementation supportDependencies.design
    implementation supportDependencies.constraint

    implementation archDependencies.lifecycle
    kapt archDependencies.lifecyclecCompiler
    implementation archDependencies.lifecycleReactiveStreams

    implementation firebaseDependencies.core
    implementation firebaseDependencies.appindexing
    implementation firebaseDependencies.perf
    implementation firebaseDependencies.crashlytics

    implementation daggerDependencies.dagger
    implementation daggerDependencies.daggerAndroid
    implementation daggerDependencies.daggerAndroidSupport
    kapt daggerDependencies.daggerCompiler
    //kapt daggerDependencies.daggerProcessor
    implementation daggerDependencies.contributer
    kapt daggerDependencies.contributerProcessor

    implementation conductorDependencies.conductor
    implementation conductorDependencies.conductorSupport
    implementation conductorDependencies.conductorLifecycle

    implementation reactiveDependencies.rxJava
    implementation reactiveDependencies.rxAndroid
    implementation reactiveDependencies.rxKotlin
    implementation reactiveDependencies.rxBinding
    implementation reactiveDependencies.rxBindingKotlin

    implementation networkDependencies.retrofit
    implementation networkDependencies.retrofitGson
    implementation networkDependencies.retrofitRxJava
    implementation networkDependencies.okHttpLogging

    implementation debugDependencies.timber
    debugImplementation debugDependencies.leakcanary
    releaseImplementation debugDependencies.leakcanarynoop

    implementation miscDependencies.butterKnife
    kapt miscDependencies.butterKnifeCompiler
    implementation miscDependencies.androidState
    kapt miscDependencies.androidStateProcessor

    testImplementation testDependencies.junit
    androidTestImplementation testDependencies.runner
    androidTestImplementation testDependencies.espresso
}

apply plugin: 'com.google.gms.google-services'